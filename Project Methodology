# bike_sales_prediction_app.py

# ========== 1. Import Libraries ==========
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import joblib

# ========== 2. Load Dataset ==========
df = pd.read_csv(r'D:\Data Sience Methodology , data project\bike_sales_100k.csv')

# Clean 'Date'
df['Date'] = pd.to_datetime(df['Date'], format='%d-%m-%Y', errors='coerce')

# Encode categorical columns
label_encoders = {}
categorical_columns = ['Bike_Model', 'Store_Location', 'Payment_Method', 'Customer_Gender']
for column in categorical_columns:
    le = LabelEncoder()
    df[column] = le.fit_transform(df[column])
    label_encoders[column] = le

# Create Revenue column
df['Revenue'] = df['Price'] * df['Quantity']

# ========== 3. Features and Target ==========
X = df[['Customer_Age', 'Bike_Model', 'Price', 'Quantity', 'Store_Location', 'Customer_Gender']]
y = df['Payment_Method']

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# ========== 4. Train Random Forest ==========
final_model = RandomForestClassifier(random_state=42)
final_model.fit(X_train, y_train)

# ========== 5. Evaluate Model ==========
y_pred = final_model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"\nModel Accuracy: {accuracy:.2f}")
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# Plot Confusion Matrix
plt.figure(figsize=(6, 4))
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
plt.title('Confusion Matrix')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()

# Cross-validation
cv_scores = cross_val_score(final_model, X_train, y_train, cv=5, scoring='accuracy')
print(f"\nCross-Validation Mean Accuracy: {np.mean(cv_scores):.2f}")

# ========== 6. Save Model & Encoders ==========
joblib.dump(final_model, 'final_model.joblib')
joblib.dump(label_encoders, 'label_encoders.joblib')

# =====================================================
# âœ… 7. Build GUI App with Tkinter
# =====================================================

import tkinter as tk
from tkinter import ttk, messagebox

# Load model & encoders
final_model = joblib.load('final_model.joblib')
label_encoders = joblib.load('label_encoders.joblib')

def predict_payment():
    try:
        age = int(age_entry.get())
        bike_model = bike_model_cb.get()
        price = float(price_entry.get())
        quantity = int(quantity_entry.get())
        store_location = store_location_cb.get()
        gender = gender_cb.get()

        features = [
            age,
            label_encoders['Bike_Model'].transform([bike_model])[0],
            price,
            quantity,
            label_encoders['Store_Location'].transform([store_location])[0],
            label_encoders['Customer_Gender'].transform([gender])[0]
        ]

        prediction = final_model.predict([features])[0]
        predicted_method = label_encoders['Payment_Method'].inverse_transform([prediction])[0]
        messagebox.showinfo("Prediction Result", f"Predicted Payment Method:\n{predicted_method}")

    except Exception as e:
        messagebox.showerror("Error", f"Invalid Input: {e}")

# GUI setup
root = tk.Tk()
root.title("ðŸš² Bike Payment Method Prediction")
root.geometry("400x500")
root.resizable(False, False)

tk.Label(root, text="Customer Age").pack(pady=5)
age_entry = tk.Entry(root)
age_entry.pack()

tk.Label(root, text="Bike Model").pack(pady=5)
bike_model_cb = ttk.Combobox(root, values=list(label_encoders['Bike_Model'].classes_))
bike_model_cb.pack()

tk.Label(root, text="Bike Price ($)").pack(pady=5)
price_entry = tk.Entry(root)
price_entry.pack()

tk.Label(root, text="Quantity").pack(pady=5)
quantity_entry = tk.Entry(root)
quantity_entry.pack()

tk.Label(root, text="Store Location").pack(pady=5)
store_location_cb = ttk.Combobox(root, values=list(label_encoders['Store_Location'].classes_))
store_location_cb.pack()

tk.Label(root, text="Customer Gender").pack(pady=5)
gender_cb = ttk.Combobox(root, values=list(label_encoders['Customer_Gender'].classes_))
gender_cb.pack()

tk.Button(root, text="Predict Payment Method", command=predict_payment, bg="green", fg="white").pack(pady=20)

root.mainloop()
